(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{218:function(n,s,a){"use strict";a.r(s);var e=a(0),l=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h3",{attrs:{id:"leetcode02-两数相加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode02-两数相加","aria-hidden":"true"}},[n._v("#")]),n._v(" leetcode02.两数相加")]),n._v(" "),a("p",[a("strong",[n._v("题目:")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("h2",{attrs:{id:"思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路","aria-hidden":"true"}},[n._v("#")]),n._v(" "),a("strong",[n._v("思路")])]),n._v(" "),a("p",[n._v("属于链表处理，将链表对应位置的值相加，并设置一个进位符")]),n._v(" "),a("p",[a("strong",[n._v("代码")]),n._v("\njavascript:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var addTwoNumbers = function(l1, l2) {\n    let ll = new ListNode(null)\n    // 要点1：复制一份出来，进行操作\n    let cur = ll;\n    // 进位符标识进位情况\n    let flag = 0;\n    while(l1!==null||l2!==null){\n        // 要点2：若有任意一个提前遍历完，要将其设置为0\n        let val1 = l1 !== null ? l1.val : 0;\n        let val2 = l2 !== null ? l2.val : 0;\n        let tmp = val1 + val2 + flag;\n        // 每一个相加的值都应该new成一个结点，添加到当前节点的后面\n        let newNode = new ListNode((tmp%10));\n        cur.next = newNode;\n        flag = tmp > 9 ? 1 : 0;\n        // 要点3： 若不为空时，才进入下一个节点\n        if(l1!==null)l1 = l1.next;\n        if(l2!==null)l2 = l2.next;\n        cur = cur.next;\n    }\n    // 要点4：最后一个若存在进位要添加到链表末尾，new一个结点添加进来\n    if(flag){\n        cur.next = new ListNode(flag);\n    }\n    // 因为第一个cur是从next才开始存储结果的\n    return ll.next\n};")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])])])}),[],!1,null,null,null);s.default=l.exports}}]);